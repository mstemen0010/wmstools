package com.wms.jdbtk3;import java.util.StringTokenizer;import java.net.MalformedURLException;/** *  *  * Wrapper class for storage of the Database url to access a particular RDBSM. *  *  * This class also provides access to the indiviual components of the URL. *  *   */public class DBUrl{    /**     *      *      * The unparsed database URL.     *      *       */    private String baseUrl;    /**     *      *      * The host part of the database URL     *      *       */    private String host;    /**     *      *      * the protocol part of the databasae URL ( i.e. jdbc )     *      *       */    private String protocol;    /**     *      *      * the database name portion of the database URL     *      *       */    private String dbName;    /**     *      *      * the portion of the database URL that provides a hint to the type of JDBC     * driver     *      *      * needed to access the RDBMS ( i.e. mysql )     *      *       */    private String driverName;    /**     *      *      * Constructor to build and parse a given database URL String     *      *      * @param urlString     *            the database URL to be parsed. database URLs are in the form:     *      *      * <PRE>     *      *      * protocol:driverType://server.address.com/databaseName     *      *      * </PRE>     *      *      * <i>     *      *      * (i.e jdbc:mysql://frodo.greshamstorage.com/vts )     *      *      * </i>     *      *      * @throws MalformedURLException     *             Uses this java Exception if their is a parsing error     *      *       */    public DBUrl(String urlString) throws MalformedURLException    {        parseUrl(urlString);    }    private void parseUrl(String dbUrl) throws MalformedURLException    {        baseUrl = dbUrl;        StringTokenizer stok = new StringTokenizer(dbUrl,":");        protocol = stok.nextToken();        driverName = stok.nextToken();        stok = new StringTokenizer(dbUrl,"/");        stok.nextToken("/");        host = stok.nextToken();        dbName = stok.nextToken();    }    public String getUrl()    {        return baseUrl;    }    public String getHost()    {        return host;    }    public String getProtocol()    {        return protocol;    }    public String getDbName()    {        return dbName;    }    public String getDriverName()    {        return driverName;    }    public String getDbRoot()    {        StringBuffer buf = new StringBuffer(protocol);        buf.append(":").append(driverName).append("://").append(host);        return buf.toString();    }}