/* * DbMgr.java * * Created on September 30, 2004, 10:24 AM */package com.wms.jdbtk3;import com.wms.jdbtk3.VDriver.DriverClass;import java.sql.SQLException;import java.util.*;import java.util.logging.Level;import java.util.logging.Logger;import javax.swing.*;import java.awt.*;import javax.swing.tree.*;import javax.swing.table.*;import java.awt.event.*;import com.wms.util.WMSLog;/** * * @author  mstemen */public class DbSpy extends javax.swing.JFrame {    private static final long serialVersionUID = 8239844658112437808L;    WMSLog log = new WMSLog( "/tmp", "DBSpy.log" );    DriverClass vDriverClass = DriverClass.Derby;    /** Creates new form DbMgr */    public DbSpy() {        initComponents();                this.leftPanel.removeAll();        try         {            dbUrl =  new DBUrl( "jdbc:mysql://localhost/vts" );        }        catch (java.net. MalformedURLException e )        {          System.out.println( "DbMgr::DbMgr:  " +  e.getMessage() );        }                DBToolkit2 dbtk = DBToolkit2.getInstance();        dbtk.setAutoBuild( true );              DBUser user = new DBUser( null );        user.setDbName( dbUrl.getDbName() );        user.setDbUrl( dbUrl.getUrl() );        user.setName( "root" );        user.setPasswd( "udt" );        user.setServerName( dbUrl.getHost() );                                vdbm = dbtk.getDbm( user, log );               // vdbm = dbtk.getDbm( );       	        dbtk.setVDBM( vdbm );                               Vector databaseNames = null;        try {            databaseNames = vdbm.getDatabaseList();        }        catch (SQLException ex) {            Logger.getLogger(DbSpy.class.getName()).log(Level.SEVERE, null, ex);        }       DefaultMutableTreeNode root = new DefaultMutableTreeNode( "Databases ");       DefaultTreeModel treeModel = new DefaultTreeModel( root );       dbView = new javax.swing.JTree( treeModel );       dbView.setEditable(true);       dbView.getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);       dbView.setShowsRootHandles(true);                      DefaultMutableTreeNode parent = (DefaultMutableTreeNode) dbView.getPathForRow( 0 ).getLastPathComponent();             for( int i = 0; i < databaseNames.size(); i++ )       {           String dbName= (String) databaseNames.elementAt( i );                      VDatabase vdb = vdbm.createDatabase( dbName, dbUrl.getDbRoot() + "/" + dbName, vDriverClass );           vdb.setDbUser( user );           vdb.build();                                 DefaultMutableTreeNode child = new DefaultMutableTreeNode( dbName );                      treeModel.insertNodeInto( child, parent, parent.getChildCount() );           createTreeNode( treeModel, child,  dbName, dbUrl.getDbRoot() +"/" + dbName  );        }                  dbView.addMouseListener(  new MouseListener()         {                public void mouseClicked( MouseEvent e )                {                    TreePath path = dbView.getSelectionPath();                    if( path != null )                    {                        showSelectedPath( path );                    }                }                public void mouseEntered( MouseEvent e )                {                                       }                                public void mouseExited( MouseEvent e )                {                                       }                public void mousePressed( MouseEvent e )                {                                       }                public void mouseReleased( MouseEvent e )                {                                       }            }                     );       /*       treeModel.addTreeModelListener( new javax.swing.event.TreeModelListener()             {                public void treeNodesChanged(TreeModelEvent e) {                    TreePath path = e.getTreePath();                    System.out.println( "Path is: " + path.toString() );                }                public void treeNodesInserted(TreeModelEvent e) {                }                public void treeNodesRemoved(TreeModelEvent e) {                }                public void treeStructureChanged(TreeModelEvent e) {                    TreePath path = e.getTreePath();                    System.out.println( "Path is: " + path.toString() );                }                    }       );        **/                                   javax.swing.JScrollPane scrollPane = new javax.swing.JScrollPane(dbView);       dbView.setModel( treeModel );       leftPanel.add(  scrollPane );                                    }        private void showSelectedPath( TreePath path )    {        // this.pagesTabs.removeAll();        VTable vTable = null;        if( path.getPathCount() >2 )        {            //System.out.println( "Path is: " + path.toString() );                        String dbName = (( DefaultMutableTreeNode ) path.getPathComponent( 1 )).toString();            String tableName = (( DefaultMutableTreeNode ) path.getPathComponent( 2 )).toString();                        System.out.println( "DbName is: " + dbName + " Table name is: " + tableName );            vdb = vdbm.findDatabase( dbUrl.getDbRoot() + "/" + dbName );            if( vdb != null )            {                                            if( dbName != null && dbName.length() > 0 )                    vdb.getDbUser().setDbName( dbName );                vdb.construct( tableName );                            vTable = vdb.getTable( tableName );                if( vTable != null )                {                    vTable.describe();                    this.addPageTable( vTable, tabCount++ );                }            }                    }            }            private void addPageTable( VTable table,  int pageIndex )    {                        rightPanel.setVisible( false );                                                if( table == null )        {            System.out.println( "Table was null ");            return;        }        // make the foreign key iddevices and the primary key field uneditable                        // break up the columns if they are wider than 5        JPanel panelToAdd = createPagePanel( table.getTableModel(), pageIndex );              if( pagesPanels == null )      {          pagesPanels = new Component[1];          pagesPanels[ 0 ] = panelToAdd;      }      else      {      // copy the old tables into a temp        Component tempComp[] = new Component[ pagesPanels.length ];        tempComp = pagesPanels;        pagesPanels = new Component[ tempComp.length + 1 ];        for( int i = 0; i < tempComp.length; i++ )        {            pagesPanels[i] = tempComp[i];        }                // pagesTables[ tempComp.length ] = table;        pagesPanels[ pagesPanels.length - 1 ] = panelToAdd;      }      pagesTabs.removeAll();                       // tempComp[ tempComp.length - 1 ] = table;      JScrollPane tScroll = null;             for( int index = 0; index < pagesPanels.length; index++ )      {          if( pagesPanels[ index ] != null )          {                        JPanel  jPanel = (JPanel) pagesPanels[index];            String tName = jPanel.getName();                                    tScroll = new JScrollPane( jPanel );                        // System.out.println( "Panel ( " + tName + " ) has: " + jPanel.getComponentCount() + " components" );            if( jPanel.getComponentCount() == 1 )            {                // pagesTabs.setBackgroundAt(index - 1, gesOrange );            }            pagesTabs.add( tScroll );                                     if( tName != null )                pagesTabs.setTitleAt( index, tName );            else                pagesTabs.setTitleAt( index, "NONE" );          }          // System.out.println( "Added Table");      }            // stockScroll.setBackground( describe_panel.getBackground() );      rightPanel.removeAll();      rightPanel.add( pagesTabs );      rightPanel.repaint();      rightPanel.repaint();            // this.describe_panel.repaint();      // pack();            /*      double max_width = this.table_names_list.getPreferredSize().getWidth() + this.stockScroll.getPreferredSize().getWidth();            Dimension d = new Dimension();      d.setSize(max_width, mainPanel.getPreferredSize().getHeight() );      this.mainPanel.setMinimumSize( d );       */      rightPanel.setVisible(true);           }    private JPanel createPagePanel ( VTableView vTable, int pageIndex )    {        // JPanel panel = new JPanel( new BorderLayout() );        // System.out.println( "StockDeviceMgr::createPagePanel: " + vTable.getName() );        int colCount = vTable.getColumnCount();                int tableNameCount = 0;        int numTables = colCount / 5;        numTables += colCount % 5;        GridBagLayout gblo = new GridBagLayout();        JPanel panel = new JPanel();        BoxLayout box = new BoxLayout( panel, this.pagesLayout );        panel.setLayout( box );        // JPanel panel = new JPanel( new BorderLayout() );        JScrollPane panelScroll = null;              if( colCount > 5                &&  vTable.getRowCount() > 0 )        {            int beginCol = 1;            int endCol = 5;            while( colCount > 5 )            {                VTableView subTable = vTable.getSubTable( vTable.getName() + "_" +String.valueOf( tableNameCount++),  beginCol, endCol );                                if( subTable != null )                {                    // add the subTable to the panel                                        JTable jTable = createTable( subTable );                    // System.out.println( "JTable has : " + jTable.getModel().getColumnCount() + " Cols and: "  + jTable.getModel().getRowCount() + " Rows");                    if( jTable != null )                    {                        // anel.add( jTable, BorderLayout.NORTH );                        panelScroll = new JScrollPane( jTable );                        panelScroll.setBackground( gesBlue );                        panel.add( panelScroll );                        numTables++;                    }                }                colCount -= 5;                            beginCol += 5;                endCol += 5;            }            // add any remainder            if( colCount > 0 )            {                               VTableView subTable = vTable.getSubTable( vTable.getName() + "_" +String.valueOf( tableNameCount++), beginCol, vTable.getColumnCount() );                if( subTable != null )                {                    vdb.put( subTable.getName(), subTable.getParentTable() );                    // add the subTable to the panel                    JTable jTable = createTable( subTable );                    if( jTable != null )                    {                                                panel.add( new JScrollPane( jTable ) );                    }                }            }                    }        else if( colCount <= 5          && vTable.getRowCount() >= 1 )        {            JTable jTable = createTable( vTable );            if( jTable != null )            {                       panel.add( new JScrollPane( jTable ) );            }        }        else        {            //System.out.println(" Emtpy Table: " + tName );             JLabel emptyText = new JLabel( "No Results for Table: " + vTable.getName() );            // System.out.println( emptyText.getText() );            emptyText.setFont( new Font("Serif,", java.awt.Font.BOLD, 14 ) );            panel.add( emptyText );            panel.setBackground( gesOrange );            // pagesTabs.setBackgroundAt( pageIndex - 1,  gesOrange );                        pagesTabs.repaint();                   }        panel.setName( vTable.getName() );                panel.repaint();        return panel;            }    private JTable createTable( final VTableView table )    {                                      // TableSorter sorter = new TableSorter( new MyTableModel()  );        // TableModel tableModel = table.getTableModel();                //System.out.println( "Table at row 0, col 0 is editable:" + tableModel.isCellEditable( 0, 0 ) );        //System.out.println( "Table at row 0, col 1 is editable:" + tableModel.isCellEditable( 0, 1 ) );                        TableSorter sorter = new TableSorter( table );        final JTable jtable = new javax.swing.JTable(  sorter  );        //final JTable jtable = new javax.swing.JTable( sorter );        // final JTable jtable = new javax.swing.JTable( table.getTableModel()  );               jtable.setName( table.getName() );        jtable.setEnabled( true );               sorter.setTableHeader(jtable.getTableHeader());                jtable.setBackground( java.awt.Color.WHITE );        jtable.setForeground( java.awt.Color.BLACK );      final javax.swing.table.JTableHeader header = jtable.getTableHeader();      header.addMouseMotionListener(new java.awt.event.MouseMotionListener()      {          public void mouseDragged( java.awt.event.MouseEvent evt )          {              getHeaderTip( table, header, evt );          }          public void mouseMoved( java.awt.event.MouseEvent evt )          {              getHeaderTip( table, header, evt );          }          public void mouseOver( java.awt.event.MouseEvent evt )          {              getHeaderTip( table, header, evt );          }      });         jtable.setTableHeader( header );      jtable.setCellSelectionEnabled(true);                       return jtable;          }        private void createTreeNode( DefaultTreeModel model, DefaultMutableTreeNode parent, String dbName, String dbUrl )    {        VDatabase vdb = vdbm.findDatabase(  dbUrl  );        vdb.build();                Vector tableNames = vdb.getTableNames();                for ( int i =0; i < tableNames.size(); i++ )        {            DefaultMutableTreeNode child = new DefaultMutableTreeNode( (String) tableNames.elementAt(i) );                model.insertNodeInto( child, parent, parent.getChildCount()  );                    }    }    private void getHeaderTip(VTableView selected_table, JTableHeader header, java.awt.event.MouseEvent evt )    {        // System.out.println( "Getting header tip, event is: " + evt  );        int columnIndex = header.getColumnModel().getColumnIndexAtX( evt.getX() );        int movedIndex = header.getTable().convertColumnIndexToModel( columnIndex );        VField signatureField = selected_table.getParentTable().getMetaData().getField( movedIndex );        String header_name = signatureField.getName();                        String header_type = signatureField.getFieldType().toString();                        String tableName = selected_table.getParentTable().getMetaData().getForeignTableNameForColumn(movedIndex );        StringBuffer buf  = new StringBuffer();        if( tableName != null )        {                              buf.append( header_name  );            buf.append( " is a foreign key to table: ");            buf.append( tableName );             }        else        {            buf.append( header_name );            buf.append( " is of data type: ");            buf.append( header_type );                           }        header.setToolTipText( buf.toString() );        // header.setToolTipText( header.getM );        // System.out.println( "Got mouse moved over index : " + buf.toString() );            }    private void getHeaderTip(VTable selected_table, JTableHeader header, java.awt.event.MouseEvent evt )    {        // System.out.println( "Getting header tip, event is: " + evt  );        int columnIndex = header.getColumnModel().getColumnIndexAtX( evt.getX() );        int movedIndex = header.getTable().convertColumnIndexToModel( columnIndex );               VField signatureField = selected_table.getMetaData().getField( movedIndex );        String header_name = signatureField.getName();                        String header_type = signatureField.getFieldType().toString();                                              String tableName = selected_table.getMetaData().getForeignTableNameForColumn(movedIndex );        StringBuffer buf  = new StringBuffer();        if( tableName != null )        {                              buf.append( header_name  );            buf.append( " is a foreign key to table: ");            buf.append( tableName );                                }        else        {            buf.append( header_name );            buf.append( " is of data type: ");            buf.append( header_type );                                          }        header.setToolTipText( buf.toString() );        // header.setToolTipText( header.getM );        // System.out.println( "Got mouse moved over index : " + buf.toString() );            }        /** This method is called from within the constructor to     * initialize the form.     * WARNING: Do NOT modify this code. The content of this method is     * always regenerated by the Form Editor.     */    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents    private void initComponents() {        topPanel = new javax.swing.JPanel();        splashPanel = new javax.swing.JPanel();        jLabel2 = new javax.swing.JLabel();        bottomPanel = new javax.swing.JPanel();        mainPanel = new javax.swing.JPanel();        jSplitPane1 = new javax.swing.JSplitPane();        leftPanel = new javax.swing.JPanel();        dbView = new javax.swing.JTree();        rightPanel = new javax.swing.JPanel();        pagesTabs = new javax.swing.JTabbedPane();        setName("dbMgrFrame");        addWindowListener(new java.awt.event.WindowAdapter() {            public void windowClosing(java.awt.event.WindowEvent evt) {                exitForm(evt);            }        });        topPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));        topPanel.setBackground(new java.awt.Color(204, 204, 204));        topPanel.setPreferredSize(new java.awt.Dimension(800, 90));        splashPanel.setLayout(new java.awt.BorderLayout());        splashPanel.setBackground(new java.awt.Color(2, 103, 154));        splashPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());        jLabel2.setForeground(new java.awt.Color(255, 255, 255));        jLabel2.setText("Database Spy");        splashPanel.add(jLabel2, java.awt.BorderLayout.SOUTH);        topPanel.add(splashPanel);        getContentPane().add(topPanel, java.awt.BorderLayout.NORTH);        bottomPanel.setBackground(new java.awt.Color(204, 204, 0));        bottomPanel.setPreferredSize(new java.awt.Dimension(800, 90));        getContentPane().add(bottomPanel, java.awt.BorderLayout.SOUTH);        mainPanel.setLayout(new java.awt.GridLayout(1, 2));        leftPanel.setLayout(new java.awt.GridLayout(1, 0));        leftPanel.setBackground(new java.awt.Color(2, 103, 154));        leftPanel.setPreferredSize(new java.awt.Dimension(200, 500));        leftPanel.add(dbView);        jSplitPane1.setLeftComponent(leftPanel);        rightPanel.setLayout(new java.awt.GridLayout(1, 0));        rightPanel.setBackground(new java.awt.Color(51, 0, 255));        rightPanel.setPreferredSize(new java.awt.Dimension(500, 500));        rightPanel.add(pagesTabs);        jSplitPane1.setRightComponent(rightPanel);        mainPanel.add(jSplitPane1);        getContentPane().add(mainPanel, java.awt.BorderLayout.CENTER);        pack();    }// </editor-fold>//GEN-END:initComponents        /** Exit the Application */    private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm        System.exit(0);    }//GEN-LAST:event_exitForm        /**     * @param args the command line arguments     */    public static void main(String args[]) {        new DbSpy().setVisible(true);    }        // Variables declaration - do not modify//GEN-BEGIN:variables    private javax.swing.JPanel bottomPanel;    private javax.swing.JTree dbView;    private javax.swing.JLabel jLabel2;    private javax.swing.JSplitPane jSplitPane1;    private javax.swing.JPanel leftPanel;    private javax.swing.JPanel mainPanel;    private javax.swing.JTabbedPane pagesTabs;    private javax.swing.JPanel rightPanel;    private javax.swing.JPanel splashPanel;    private javax.swing.JPanel topPanel;    // End of variables declaration//GEN-END:variables        private Color gesBlue = new Color( 2,103, 154 );    private Color gesOrange = new Color( 255, 104, 4 );    // database stuff    private DBUrl dbUrl = null;    // private int pagesLayout = BoxLayout.LINE_AXIS;    private int pagesLayout = BoxLayout.PAGE_AXIS;    private Component[] pagesPanels = null;    private VDatabase vdb = null;    private VDBM vdbm = null;    private int tabCount = 0;    }