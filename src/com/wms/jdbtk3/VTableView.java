/* * VTableView.java * * Created on September 17, 2004, 11:34 AM */package com.wms.jdbtk3;import java.util.Hashtable;import javax.swing.table.TableModel;/** * * @author  mstemen */public class VTableView  implements TableModel {        VTable parentTable = null;    // set up a 2 dim array that will be a name value pair match where the name is the real row in the VTable this is fronting for and the views "virtual" idea of the Table    // thus if the original table had 30 rows and the view ( the result of a subserach ) only has one row that is the 20th row of the real VTable the map would have    // the relationship [ 0 ][20]. The smae is true of columns        int rowMap[] = null;    // the orign    int colMap[] = null;    int rowCount = 0;    int colCount = 0;            /**     * Creates a new instance of VTableView     * @param parent Provides a link back to the table that this class is a view of     */    public VTableView( VTable parent ) {        parentTable = parent;        rowMap = new int[ parent.getRowCount() ] ;        colMap = new int[ parent.getColumnCount() ];                rowCount = parent.getRowCount();        colCount = parent.getColumnCount();                for( int i= 0 ; i < rowCount; i++ )        {            mapRowToRow( i, i );                    }        for( int i = 0; i  < colCount; i++ )        {            mapColToCol( i, i );        }        }        /**     *     * @param l     */        public void addTableModelListener(javax.swing.event.TableModelListener l) {    }        /**     *     * @param columnIndex     * @return     */        public Class getColumnClass(int columnIndex) {       return parentTable.getColumnClass( colMap[ columnIndex ]) ;    }        /**     *     * @return     */        public int getColumnCount() {        return colCount;    }        /**     *     * @param columnIndex     * @return     */        public String getColumnName(int columnIndex) {        return parentTable.getColumnName( colMap[ columnIndex ] );    }        /**     *     * @return     */        public int getRowCount() {        return rowCount;    }        /**     *     * @param rowIndex     * @param columnIndex     * @return     */        public Object getValueAt(int rowIndex, int columnIndex) {                  /*        String tableName = parentTable.getName();        if( tableName.equals( "stock_devices" ) )        {            parentTable.dumpTable();            Object value = parentTable.getValueAt( rowMap[ rowIndex], colMap[ columnIndex ] );            System.out.println( "VTableView::getValueAt(" + value +  "): trans row:" + rowIndex + " to: " + rowMap[ rowIndex ] + " in Parent table: " + getName());            System.out.println( "VTableView::getValueAt(" + value +  "): trans col:" + columnIndex + " to: " + colMap[ columnIndex ] + " in Parent table: " + getName());        }        */         return parentTable.getValueAt( rowMap[ rowIndex ], colMap[ columnIndex ] );    }        /**     *     * @param rowIndex     * @param columnIndex     * @return     */        public boolean isCellEditable(int rowIndex, int columnIndex) {        return parentTable.isCellEditable( rowMap[ rowIndex ], colMap[ columnIndex ] );    }        /**     *     * @param l     */        public void removeTableModelListener(javax.swing.event.TableModelListener l) {    }        /**     *     * @param aValue     * @param rowIndex     * @param columnIndex     */        public void setValueAt(Object aValue, int rowIndex, int columnIndex) {        parentTable.setValueAt( (String) aValue, rowMap[ rowIndex ], colMap[ columnIndex ] );    }        /**     *     * @param realRow     * @param viewRow     */        public void mapRowToRow( int realRow, int viewRow)    {        if(  viewRow <  rowMap.length )        {            rowMap[ viewRow  ] = realRow;                    }        else        {                        System.out.println( "VTableView::mapRowToRow: row: " + viewRow +  " is out of range ");        }    }        /**     *     * @param realCol     * @param viewCol     */        public void mapColToCol( int realCol, int  viewCol )    {        if(  viewCol < colMap.length)        {               colMap[ viewCol  ] = realCol;                    }        else        {            // System.out.println( "VTableView::mapColtoCol: col: " + viewCol +  " is out of range ");        }            }        /**     *     * @param columnCount     */        public void setColumnCount( int columnCount )    {        colCount = columnCount;        colMap = new int[ columnCount];    }                /**     *     * @param rowCount     */        public void setRowCount( int rowCount )    {        this.rowCount = rowCount;        rowMap = new int[ rowCount ];;     }        /**     *     * @return     */        public String getName( )    {        return parentTable.getName();    }        /**     *     * @param tableName     * @param beginingIndex     * @param endingIndex     * @return     */        public VTableView getSubTable( String tableName, int beginingIndex, int endingIndex )    {        VTableView view = new VTableView( getParentTable() );        // remap the columns to reflect the new geometry        if( endingIndex < beginingIndex )            endingIndex = parentTable.getColumnCount();        int numColumns = endingIndex - beginingIndex;        if( numColumns >= 1 )            numColumns++;        view.setColumnCount(  numColumns );                view.setRowCount(  this.rowCount );        int viewIndex = 0;        for( int i = beginingIndex; i <= endingIndex; i++ )        {            view.mapColToCol( ( i - 1 ) , viewIndex++ );        }        for( int i = 0; i < this.rowMap.length; i++ )        {            view.mapRowToRow( this.rowMap[i], i );        }        return view;    }    /**     *     * @return     */        public VTable getParentTable( )    {        return parentTable;    }}