/* * * * Created on Jun 22, 2004 * * * * * * To change the template for this generated file go to * * * Window&gt;Preferences&gt;Java&gt;Code Generation&gt;Code and Comments * * */package com.wms.jdbtk3;/** * * * @author mstemen * * * * * * To change the template for this generated type comment go to * * * Window&gt;Preferences&gt;Java&gt;Code Generation&gt;Code and Comments * * */import com.wms.jdbtk3.VDriver.DriverClass;import java.util.*;import java.sql.*;import java.net.*;import com.wms.util.*;import com.wms.util.gui.GUILogInterface;import org.apache.derby.jdbc.ClientDriver;public class VDBM{    /**     *     *     *     *     *     * @uml.property name="dataBases"     *     *     * @uml.associationEnd     *     *     * @uml.property name="dataBases" multiplicity="(0 1)"     *               qualifier="db_name:java.lang.String     *     *     * data_base:dbtk.db_toolkit.VDatabase"     *     *     */    Hashtable<String, VDatabase> dataBases = new Hashtable<String, VDatabase>();    /**     *     *     *     *     *     * @uml.property name="connections"     *     *     * @uml.associationEnd     *     *     * @uml.property name="connections" multiplicity="(0 1)"     *               qualifier="getKey:java.lang.String     *     *     * connection:java.sql.Connection"     *     *     */    Hashtable<String, Connection> connections = new Hashtable<String, Connection>();    boolean autoBuild = false;    DBUser user = new DBUser(null);    private WMSLog log = new WMSLog("/tmp", "VDBM.log");    private GUILogInterface gLog = null;    public VDBM(DBUser user)    {        this.user = user;    }    public VDBM()    {        user = new DBUser(null);      }    public VDBM(DBUser user, GUILogInterface gLog )    {        this.user = user;        this.gLog = gLog;    }    public VDBM(DBUser user, WMSLog log)    {        this.user = user;        this.log = log;    }    protected void finalize() throws Throwable    {        closeAllConnections();    }    private void closeAllConnections()    {        log.write("Attempting to close all DB connections...");        try {            Enumeration enumer = connections.keys();            while (enumer.hasMoreElements()) {                Connection connection = (Connection) connections.get(enumer.nextElement());                if (connection != null && !connection.isClosed()) {                    connection.close();                }            }            log.write("Done");        }        catch (SQLException e) {            log.write(e.getMessage());        }    }    public void addDatabase(VDatabase data_base)    {        dataBases.put(data_base.getDbUrl(), data_base);    }    public VDatabase getDatabase(String dbName)    {        return dataBases.get(dbName);    }    public void reconnectDatabase(DBUser user, String old_url, String new_url, DriverClass driverClass )    {        // purge the old database and connection        VDatabase vdb = findDatabase(old_url);        String driveName = vdb.getDriverName();        if (vdb != null) {            // get rid of the old one            vdb.reset();            dataBases.remove(old_url);            closeConnection(vdb.getDbUser());        }        // create a new one        vdb = createDatabase(user.getDb_name(), new_url, driverClass);        // rebuild it        vdb.setDbUrl(new_url);        vdb.setDbUser(user);        vdb.setDriverName(driveName);        if (autoBuild) {            vdb.build();            vdb.populate();            vdb.learnTopolgy();        }        addDatabase(vdb);    }    public Vector getDatabaseList() throws SQLException    {        Vector<String> databases = new Vector<String>();        ResultSet rs = null;        if(user.getVDriverClass() == DriverClass.Derby)        {            ClientDriver cd = VDriverMgr.getVDriver(DriverClass.Derby).getDerbyDriver();            if( cd != null )            {                Connection conn = DriverManager.getConnection( user.getDbUrl());            }        }        try {            DBUrl dbUrl = new DBUrl(user.getDbUrl());            String dbUrlStr = dbUrl.getDbRoot();            Connection conn = this.getConnection(user);            Statement stmt = conn.createStatement();            rs = stmt.executeQuery("Show databases");            while (rs.next()) {                String dbName = rs.getString(1);                if (dbName != null && dbName.length() > 0) {                    databases.addElement(dbName);                }            }            // log.write( "Table name is: " + name );            conn.close();        }        catch (SQLException e) {            log.write("VDBM::getDatabaseList: SQL Error -  " + e.getMessage());        }        catch (java.net.MalformedURLException e) {            log.write("VDBM::getDatabaseList: Bad URL -  " + e.getMessage());        }        return databases;    }    public void addConnection(DBUser user, Connection connection)    {        connections.put(user.getKey(), connection);    }    public Connection findConnection(DBUser user)    {        if (connections.containsKey(user.getKey())) {            return ((Connection) connections.get(user.getKey()));        }        return null;    }    public void closeConnection(DBUser user)    {        if (connections.containsKey(user.getKey())) {            Connection connection = (Connection) connections.get(user.getKey());            if (connection != null) {                try {                    if (!connection.isClosed()) {                        connection.close();                    }                }                catch (SQLException e) {                    log.write(e.getMessage());                }            }        }    }    public VDatabase findDatabase(String db_url)    {        if (dataBases.containsKey(db_url)) {            return ((VDatabase) dataBases.get(db_url));        }        return null;    }    public Connection getConnection(DBUser user)    {        Connection connection = null;        String driveName = "com.mysql.jdbc.Driver";        VDriver vd = VDriverMgr.getVDriver(user.getVDriverClass());        String driverName = vd.getDriverName();        if( vd.isDriverMapped())        {            // map and load the driver if not already done...        }        try {            // Load the JDBC driver            // Class.forName( db.getDriverName() );            // Class.forName(driveName).newInstance();            // Create a connection to the database            log.write("Database URL is: " + user.getDbUrl());            connection = DriverManager.getConnection(user.getDbUrl(), user.getName(), user.getPasswd());            log.write(connection.toString());            connections.put(user.getKey(), connection);        }        catch (SQLException e) {            // Could not connect to the database            log.write("Database Error:" + e.toString());        }        catch (java.lang.Exception e) {            log.write("Instance creation error:" + e.toString());        }        return connection;    }    public Connection getConnection(DBUser user, String db_url) throws SQLException    {        Connection connection = null;        // see if there is an existing connection first        connection = findConnection(user);        if (connection != null && !connection.isClosed()) {            // log.write( "Using existing connection");            return connection;        }        // look up the database        VDatabase db = findDatabase(db_url);        if (db == null) {            throw new SQLException();        }        DBUrl dbUrl = null;        // String driverName = "org.gjt.mm.mysql.Driver"; // MySQL MM JDBC        // driveCr        try {            dbUrl = new DBUrl(user.getDbUrl());            // Load the JDBC driver            // Class.forName( db.getDriverName() );            // test the connection first... as there is _no_ definate that            // Socket dbSocket = new Socket(dbUrl.getHost(), 3306);            Socket dbSocket = new Socket("localhost", 3306);            Class.forName("com.mysql.jdbc.Driver").newInstance();            // Create a connection to the database            log.write("Database URL is: " + db.getDbUrl());            connection = DriverManager.getConnection(db.getDbUrl(), user.getName(), user.getPasswd());            log.write(connection.toString());            connections.put(user.getKey(), connection);        }        catch (ClassNotFoundException e) {            log.write("Could not find the database driver: " + db.getDriverName());        }        catch (UnknownHostException e) {            log.write("Host: \"" + dbUrl.getHost() + "\" was invalid.");            log.write("Connection message was:\"" + e.getMessage() + "\": No such host found ");            System.exit(-1);        }        catch (SQLException e) {            // Could not connect to the database            log.write("Database Error:" + e.toString());        }        catch (MalformedURLException e) {            log.write("Connection Error:" + e.toString());        }        catch (java.lang.Exception e) {            log.write("Instance creation error:" + e.toString());        }        return connection;    }    public VDatabase createDatabase(String name, String db_url, DriverClass driverClass)    {              VDatabase vdb = null;        vdb = new VDatabase(gLog, driverClass);        vdb.setName(name);        vdb.setDbUrl(db_url);        DBUser user = vdb.getDbUser();        if (user == null) {            user = new DBUser(null);        }        user.setDbUrl(db_url);        dataBases.put(db_url, vdb);        return vdb;    }    public boolean getAutoBuild()    {        return autoBuild;    }    public void setAutoBuild(boolean autoBuild)    {        this.autoBuild = autoBuild;    }    public Hashtable<String, VDatabase> getDataBases()    {        return dataBases;    }    public void setDataBases(Hashtable<String, VDatabase> val)    {        this.dataBases = val;    }    public Hashtable<String, Connection> getConnections()    {        return connections;    }    public void setConnections(Hashtable<String, Connection> val)    {        this.connections = val;    }    public DBUser getUser()    {        return user;    }    public void setUser(DBUser val)    {        this.user = val;    }    public WMSLog getLog()    {        return log;    }    public void setLog(WMSLog val)    {        this.log = val;    }}